import {CardCvcElement, CardExpiryElement, CardNumberElement, Elements, useElements,useStripe } from '@stripe/react-stripe-js';
import axios from 'axios'
import React,{useEffect} from 'react';
import {useDispatch, useSelector} from 'react-redux'
import {useNavigate} from 'react-router-dom'
import {validateShipping} from './CheckOut'
import { loadStripe } from '@stripe/stripe-js';
import { toast } from 'react-toastify';
import { orderCompleted } from '../../slice/cartSlice';
import '../../cssFiles/login.scss';
import '../../cssFiles/payment.scss'
import { createOrder } from '../../actions/orderAction';
import {clearError as clearOrderError} from "../../slice/orderSlice"
function Payment(props) {
    const stripe = useStripe();
    const elements = useElements();
    const dispatch = useDispatch()
    const navigate = useNavigate();
    const orderInfo = JSON.parse(sessionStorage.getItem('orderInfo'))
    const { user } = useSelector(state => state.authState)
    const {items:cartItems, shippingInfo } = useSelector(state => state.cartState)
    const { error:orderError } = useSelector(state => state.orderState)

    const paymentData = {
        amount : Math.round( orderInfo.totalPrice * 100),
        shipping :{
            name: user?.name,
            address:{
                city: shippingInfo.city,
                postal_code : shippingInfo.postalCode,
                country: shippingInfo.country,
                state: shippingInfo.state,
                line1 : shippingInfo.address
            },
            phone: shippingInfo.phoneNo
        }
    }

    const order = {
        orderItems: cartItems,
        shippingInfo
    }

    if(orderInfo) {
        order.itemsPrice = orderInfo.itemsPrice
        order.shippingPrice = orderInfo.shippingPrice
        order.taxPrice = orderInfo.taxPrice
        order.totalPrice = orderInfo.totalPrice
        
    }

    useEffect(() => {
        validateShipping(shippingInfo, navigate)
        if(orderError) {
            toast(orderError, {
                position: toast.POSITION.BOTTOM_CENTER,
                type: 'error',
                onOpen: ()=> { dispatch(clearOrderError()) }
            })
            return
        }

    },[dispatch,navigate,orderError,shippingInfo])

    const submitHandler = async (e) => {
        e.preventDefault();
        document.querySelector('#reg-btn').disabled = true;
       

        try{
            const {data} = await axios.post('/api/v1/payment/process', paymentData)
            const clientSecret = data.client_secret
             const result = await stripe.confirmCardPayment(clientSecret,
             {

                payment_method: {
                    card: elements.getElement(CardNumberElement),
                    billing_details: {
                        name: user.name,
                        email: user.email
                    }
                  
                 } 
              
              }) 
       
               console.log(result);
     
              if(result.error){
                toast(result.error.message, {
                    type: 'error',
                    position: toast.POSITION.BOTTOM_CENTER
                })
                document.querySelector('#reg-btn').disabled=false;
              }else{
                if((await result).paymentIntent.status === 'succeeded') {
                    toast('Payment Success!', {
                        type: 'success',
                        position: toast.POSITION.BOTTOM_CENTER
                    })
                    order.paymentInfo = {
                        id: result.paymentIntent.id,
                        status: result.paymentIntent.status
                    }
                    dispatch( orderCompleted())
                    dispatch(createOrder(order))
                    navigate('/confirmorder')
                   
                 
                }else{
                    toast('Please Try again!', {
                        type: 'warning',
                        position: toast.POSITION.BOTTOM_CENTER
                    })
                  }
              }
                      
        }catch(error){

        }
    }

    return (


        
        <div className="login-container" id="card-info">
           <div  className='header-title' >
           <h2>Card Info</h2>
             </div>
        

          <div className="mail-password-sec" id="register-sec">
          <Elements  stripe={loadStripe('clientSecret')} >
          <form onSubmit={submitHandler}>
                  
                    <label htmlFor="card_num_field">Card Number</label>
                    <CardNumberElement className='input-card'/>
               
                    <label htmlFor="card_exp_field">Card Expiry</label>
                    <CardExpiryElement className='input-card'/>
                                
                    <label htmlFor="card_cvc_field">Card CVC</label>
                    <CardCvcElement className='input-card'/>
                 
                <button type='submit' className='pay-btn' id='reg-btn'>Pay - {`$${orderInfo && orderInfo.totalPrice}`}</button>   
         </form> 
         </Elements>
          </div>
     
        </div>
      
    );
}

export default Payment;